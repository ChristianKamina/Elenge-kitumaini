package com.youthfimodd.elenges;import android.Manifest;import android.app.AlertDialog;import android.content.Intent;import android.content.pm.PackageManager;import android.net.Uri;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import androidx.fragment.app.FragmentActivity;import com.android.volley.AuthFailureError;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.JsonObjectRequest;import com.android.volley.toolbox.Volley;import com.github.clans.fab.FloatingActionButton;import com.google.android.gms.maps.CameraUpdateFactory;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.OnMapReadyCallback;import com.google.android.gms.maps.SupportMapFragment;import com.google.android.gms.maps.model.LatLng;import com.google.android.gms.maps.model.MarkerOptions;import com.google.android.material.bottomsheet.BottomSheetBehavior;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseUser;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.Query;import com.google.firebase.database.ServerValue;import com.google.firebase.database.ValueEventListener;import com.google.gson.Gson;import com.youthfimodd.elenges.custom.chat_model.Data;import com.youthfimodd.elenges.custom.chat_model.Sender;import com.youthfimodd.elenges.custom.chat_model.Token;import com.youthfimodd.elenges.custom.chat_model.Users;import org.json.JSONException;import org.json.JSONObject;import java.util.HashMap;import java.util.Map;public class MapsActivity extends FragmentActivity implements OnMapReadyCallback {    private GoogleMap mMap;    private BottomSheetBehavior behavior;    private View bottomSheet;    private LinearLayout linearLayout;    private FloatingActionButton actionButton;    //    private TextView txtTitre, txtPEd, txtLieu, txtNumero, txtDmdSer;    private ImageView imgTitre, imgLieu, imgPhone, imgDmdSer;    private String type;    //ajout    private DatabaseReference mUserDatabase;    private FirebaseUser firebaseUser;    //volley request  queue notification    private RequestQueue requestQueue;    private  boolean notify = false;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_maps);        // Obtain the SupportMapFragment and get notified when the map is ready to be used.        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()                .findFragmentById(R.id.map);        mapFragment.getMapAsync(this);        //ajout        firebaseUser = FirebaseAuth.getInstance().getCurrentUser();        mUserDatabase = FirebaseDatabase.getInstance().getReference("Users");        requestQueue = Volley.newRequestQueue(getApplicationContext());        //        type = getIntent().getStringExtra("type");        //        txtTitre = findViewById(R.id.Titre);        txtPEd = findViewById(R.id.NombreServices);        txtLieu = findViewById(R.id.Adresse);        txtNumero = findViewById(R.id.Numero);        txtDmdSer = findViewById(R.id.Dmnd_service);        imgTitre = findViewById(R.id.ImgTitre);        imgLieu = findViewById(R.id.ImgLieu);        imgPhone = findViewById(R.id.ImgNumero);        imgDmdSer = findViewById(R.id.ImgDmdSer);        //get the bottom sheet view        linearLayout = findViewById(R.id.design_bottom_sheet);        bottomSheet = findViewById(R.id.bottom_sheet);        //initialise the BottomSheetBehavior        behavior = BottomSheetBehavior.from(bottomSheet);        // change the state of the bottom sheet        behavior.setPeekHeight(50);        behavior.setState(BottomSheetBehavior.STATE_COLLAPSED);        // set callback for changes        behavior.setBottomSheetCallback(new BottomSheetBehavior.BottomSheetCallback() {            @Override            public void onStateChanged(@NonNull View view, int newState) {                if (newState == BottomSheetBehavior.STATE_COLLAPSED){                    linearLayout.setVisibility(View.VISIBLE);                }                if (newState == BottomSheetBehavior.STATE_EXPANDED){                    linearLayout.setVisibility(View.VISIBLE);                }                if (newState == BottomSheetBehavior.STATE_DRAGGING){                    linearLayout.setVisibility(View.VISIBLE);                }            }            @Override            public void onSlide(@NonNull View view, float v) {            }        });        //Floating Bottom        actionButton =  findViewById(R.id.fab_directions);        actionButton.setOnClickListener(v -> {            if (behavior.getState() == BottomSheetBehavior.STATE_COLLAPSED){                behavior.setState(BottomSheetBehavior.STATE_EXPANDED);                /*Ajout*/                mUserDatabase.addValueEventListener(new ValueEventListener() {                    @Override                    public void onDataChange(@NonNull DataSnapshot dataSnapshot) {                        for (DataSnapshot snapshot : dataSnapshot.getChildren()){                            String Name = snapshot.child("name").getValue().toString();                            final String Id = snapshot.child("id").getValue().toString();                            final Users user = snapshot.getValue(Users.class);                            /*Afficher l'user dont le nom est Ngams*/                            if (!user.getId().equals(firebaseUser.getUid()) && user.getName().equals("Giresse Kiye")){                                txtPEd.setText("Pair Educateur: " +Name);                                //                                txtPEd.setOnClickListener(v13 -> {                                    Intent intent = new Intent(MapsActivity.this, SOSChatActivity.class);                                    intent.putExtra("SOS_user_id", Id);                                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                                    startActivity(intent);                                });                            }                        }                    }                    @Override                    public void onCancelled(@NonNull DatabaseError databaseError) {                    }                });                /*Fib ajout*/                txtTitre.setText("Youthfim");                //txtPEd.setText("Tous les Services de PF y sont offerts");                txtLieu.setText("Unikin, Plataau des étudiants");                imgTitre.setImageResource(R.mipmap.logo);                txtNumero.setText("+243 823 050 183");                //click                txtNumero.setOnClickListener(v1 -> {                    Intent call = new Intent(Intent.ACTION_DIAL);                    call.setData(Uri.parse("tel:+243 823 050 183"));                    startActivity(call);                });                txtDmdSer.setOnClickListener(v12 -> {                    Toast.makeText(this, "Coming soon!", Toast.LENGTH_SHORT).show();                });            }else {                behavior.setState(BottomSheetBehavior.STATE_COLLAPSED);            }        });        //    }    /**     * Manipulates the map once available.     * This callback is triggered when the map is ready to be used.     * This is where we can add markers or lines, add listeners or move the camera. In this case,     * we just add a marker near Sydney, Australia.     * If Google Play services is not installed on the device, the user will be prompted to install     * it inside the SupportMapFragment. This method will only be triggered once the user has     * installed Google Play services and returned to the app.     */    /*centres à ajouter: centre coulibaly, apf, carrefour des jeunes, */    @Override    public void onMapReady(GoogleMap googleMap) {        mMap = googleMap;        DatabaseReference MapReference = FirebaseDatabase.getInstance().getReference("Maps_Coordinates");        MapReference.addValueEventListener(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {                for (DataSnapshot snapshot : dataSnapshot.getChildren()){                    String ImageLoc = (String) snapshot.child("imageUrl").getValue();                    String Place = (String) snapshot.child("place").getValue();                    String Type = (String) snapshot.child("type").getValue();                    String Address = (String) snapshot.child("address").getValue();                    String Provider = (String) snapshot.child("provider").getValue();                    String Phone = (String) snapshot.child("phone").getValue();                    Double Latitude = snapshot.child("latitude").getValue(Double.class);                    Double Longitude = snapshot.child("longitude").getValue(Double.class);                    assert Type != null;                    if (Type.equals(type)){                        if(Latitude != null && Longitude != null){                            LatLng latLng = new LatLng(Latitude,Longitude);                            mMap.addMarker(new MarkerOptions().position(latLng).title(Type+": "+Place).snippet(Provider+", "+Phone));                            mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(Latitude,Longitude),10F));                            if (ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {                                ActivityCompat.requestPermissions(MapsActivity.this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 0);                                return;                            }else{                                mMap.setMyLocationEnabled(true);                            }                        }                    }                    /*--*/                    //Click sur un marker                    /*-                    mMap.setOnMarkerClickListener(marker -> {                        //                        behavior.setState(BottomSheetBehavior.STATE_COLLAPSED);                        LatLng Choix = marker.getPosition();                        if (behavior.getState() == BottomSheetBehavior.STATE_COLLAPSED) {                            behavior.setState(BottomSheetBehavior.STATE_EXPANDED);                            if (Choix.equals(Place)) {                                txtTitre.setText(Place);                                txtPEd.setText("Prestaire: "+ Provider);                                txtLieu.setText(Address);                                imgTitre.setImageResource(R.mipmap.ic_hopital_dmm);                                txtNumero.setText(Phone);                                //click                                txtNumero.setOnClickListener(v -> {                                    Intent call = new Intent(Intent.ACTION_DIAL);                                    call.setData(Uri.parse(Phone));                                    startActivity(call);                                });                                txtDmdSer.setOnClickListener(v -> {                                    AlertDialog.Builder builder = new AlertDialog.Builder(MapsActivity.this);                                    builder.setTitle("Demande des Services de PF");                                    //add List                                    String[] services = {"L'IMPLANT", "L'INJECTION", "DIU \n Dispositif Intra-utérin", "LA PULULE", "L'ABSTINANCE", "LA PULULE D'URGENCE", "LE PRESERVATIF"};                                    builder.setItems(services, new DialogInterface.OnClickListener() {                                        @Override                                        public void onClick(DialogInterface dialog, int which) {                                            Toast.makeText(MapsActivity.this, "SOS sending..."+Provider, Toast.LENGTH_SHORT).show();                                        }                                    });                                    builder.setNegativeButton("Fermer", null);                                    //                                    AlertDialog dialog = builder.create();                                    dialog.show();                                });                            }                        }                        return true;                    });                    end-*/                }                /*--*/                /*-end-*/            }            @Override            public void onCancelled(@NonNull DatabaseError error) {            }        });        // click sur un marker        /*-Poser une condition-*/    }    //ajout    // send SOS message    public void SendMessage(String sender, final String receiver, final String message){        //        DatabaseReference reference = FirebaseDatabase.getInstance().getReference();        Object datatime = ServerValue.TIMESTAMP;        HashMap<String, Object> hashMap = new HashMap<>();        hashMap.put("sender", sender);        hashMap.put("receiver", receiver);        hashMap.put("message", message);        hashMap.put("datatime", datatime);        hashMap.put("type", "text");        hashMap.put("Issoon", false);        //        reference.child("ChatsSOS").push().setValue(hashMap);        reference = FirebaseDatabase.getInstance().getReference("Users").child(firebaseUser.getUid());        reference.addValueEventListener(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {                //                Users users = dataSnapshot.getValue(Users.class);                if (notify){                    /*Znvoie notification SOS*/                    sendNotification(receiver, users.getName(), message);                }                notify = false;            }            @Override            public void onCancelled(@NonNull DatabaseError databaseError) {            }        });    }    private void sendNotification(String receiver, final String username, final String message){        DatabaseReference tokens = FirebaseDatabase.getInstance().getReference("Tokens");        Query query = tokens.orderByKey().equalTo(receiver);        query.addValueEventListener(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {                //                for (DataSnapshot snapshot : dataSnapshot.getChildren()){                    Token token = snapshot.getValue(Token.class);                    String userid = snapshot.child("id").getValue().toString();                    /* arranger notification demande*/                    Data data = new Data(firebaseUser.getUid(), R.mipmap.ic_icon_eleng, username + "\n"+message, " SOS Message ", userid, "MessageSOS");                    Sender sender = new Sender(data, token.getToken());                    //fcm json object request                    try {                        JSONObject senderJsonObject = new JSONObject(new Gson().toJson(sender));                        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest("https://fcm.googleapis.com/fcm/send", senderJsonObject,                                new Response.Listener<JSONObject>() {                                    @Override                                    public void onResponse(JSONObject response) {                                        //response of the request                                        Log.d("JSON_RESPONSE", "onResponse: "+response.toString());                                    }                                }, new Response.ErrorListener() {                            @Override                            public void onErrorResponse(VolleyError error) {                                Log.d("JSON_RESPONSE", "onResponse: "+error.toString());                            }                        }){                            @Override                            public Map<String, String> getHeaders() throws AuthFailureError {                                //put params                                Map<String, String> headers = new HashMap<>();                                headers.put("Content-Type", "application/json");                                headers.put("Authorization", "key=AAAA6-_uMK8:APA91bEdce3idooVxM0JWPhs5fhsS6NVMv4lhndKV8HQIe65nqbeIbARz3cslJioGukBB1CvQY1Hgf-sL6HkIDwLEnY62VvBbkoaVzIW-rGbj40Wl-Pu-rqJoMpbPbc410iEv9_nfSTd");                                return headers;                            }                        };                        //add this request to queue                        requestQueue.add(jsonObjectRequest);                    } catch (JSONException e) {                        e.printStackTrace();                    }                }            }            @Override            public void onCancelled(@NonNull DatabaseError databaseError) {            }        });    }    //fin    @Override    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        if (requestCode == 0) {            if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {                mMap.setMyLocationEnabled(true);            }        }    }    private void showMessage(String titre, String message) {        AlertDialog.Builder builder = new AlertDialog.Builder(this);        builder.setTitle(titre);        builder.setMessage(message);        builder.setCancelable(true);        builder.create();        builder.show();    }}